
# builtin #

(if c (t) (f)) ?

(cons a b) ?
(car p) ?
(cdr p) ?

(putchar char) ?

(equal y x) ?
(above y x) ?

(add y x) ?
(sub y x) ?
(mul y x) ?
(div y x) ?
(mod y x) ?

(read-file name) ?

# common #

(or x (y))
if x x y

(and x (y))
if x y 0

(not x)
if x 0 1

(do x y)
y

# variables #

(let [val] val (in val))
in val

# looping #

(for [name] list (in name))
and list
do  in car list
    for name cdr list in name


(fold [last name] start list (in last name))
if  list
    in  fold last name start cdr list in last name
        car list
    start

(map [name] list (in name))
and list
cons in car list
     map name cdr list in name

(filter [name] list (cond name))
and list
let rest
    filter name cdr list cond name
if  cond car list
    cons car list rest
    rest
    

(contains list (check el))
and list
    or  check car list
        contains cdr list check el

(length list)
and list
    add 1 length cdr list

# io #

(put-line)
putchar 10

(put-str s)
for k s putchar k

(put-digit n)
putchar add '0 mod 10 n

(put-num-nonzero n)
or  equal 0 n
do  put-num-nonzero div 10 n
    put-digit n

(put-num n)
if  n
    put-num-nonzero n
    put-digit 0

(put-list-sep-from n tree (sep) (then el))
and tree
do  and n sep
do  then car tree
    put-list-sep-from
        add 1 n
        cdr tree
        sep
        then el

(put-list-sep tree (sep) (then el))
put-list-sep-from 0 tree sep then el

# lists #

(reverse-from list res)
if  list
    reverse-from cdr list cons car list res
    res

(reverse list)
reverse-from list 0

(concat x y)
if  x
    cons car x concat cdr x y
    y

(flatten ls)
fold c el
     0 ls
    concat el c

# strings #

(str-eq x y)
if  x
    if  y
        and equal  car  x car  y
            str-eq cdr x cdr y
        0
    if  y
        0
        1

# uniq sets #

(has-str ls str)
and ls
or  str-eq str car ls
    has-str cdr ls str

(uniq-str-add ls str)
if  has-str ls str
    ls
    cons str ls

(uniq-str ls)
fold x el
     0 ls
    uniq-str-add x el

# converters #

(num-to-str-nonzero n)
or  equal 0 n
concat
    num-to-str-nonzero div 10 n
    cons add '0 mod 10 n 0

(num-to-str n)
if  n
    num-to-str-nonzero n
    "0"

(rstr-to-num x)
and x
    add mul 10 rstr-to-num cdr x
        sub '0 car x

(str-to-num x)
rstr-to-num reverse x

# error library #

(error-from-str msg) cons 0 msg
(error-from-both n1 n2) cons 1 cons n1 n2
(error-from-wanted exp) cons 2 exp
(error-from-got rec) cons 3 rec
(error-from-position pos error) cons 4 cons pos error
(error-from-char chr) cons 5 chr

(error-is-str error) equal 0 car error
(error-is-both error) equal 1 car error
(error-is-wanted error) equal 2 car error
(error-is-got error) equal 3 car error
(error-is-position error) equal 4 car error
(error-is-char error) equal 5 car error

(put-error-body error)
if  error-is-char error
    if  equal 10 cdr error
        put-str "newline"
    if  equal 32 cdr error
        put-str "space"
    if  equal 39 cdr error
        put-str "signle quote"
        do  putchar 39
        do  putchar cdr error
            putchar 39
if  error-is-str error
    put-str cdr error
if  error-is-both error
    do  put-error-body car cdr error
    do  put-str " "
        put-error-body cdr cdr error
if  error-is-wanted error
    do  put-str "(Wanted: "
    do  put-error-body cdr error
        put-str ")"
if  error-is-got error
    do  put-str "(Got: "
    do  put-error-body cdr error
        put-str ")"
if  error-is-position error
    let pos car cdr error
    do  put-str "At Line "
    do  put-num car pos
    do  put-str ", Col "
    do  put-num cdr pos
    do  put-str ": "
        put-error-body cdr cdr error
    0

(put-error error)
do  put-error-body error
    put-line
# parser library #

(state-has-data str)
cdr str

(state-data str)
car cdr str

(state-pos str)
car str

(state-line str)
car state-pos str

(state-col str)
cdr state-pos str

(str-to-state str)
cons cons 1 1 str

(state-skip str)
let data cdr str
let chr state-data str
let col state-col str
let line state-line str
    cons
        if  equal chr 10
            cons add 1 line 1
            cons line       add 1 col
        cdr data

(strip-comment str)
if  not state-has-data str
    str
let chr state-data str
if  equal '# chr
    state-skip str
    strip-comment state-skip str

(strip str)
if  not state-has-data str
    str
let chr state-data str
if  equal '# chr
    strip strip-comment state-skip str
if  or  equal '   chr
        equal 10  chr
    strip state-skip str
    str

(parse-any str (then value str) (error info))
if  state-has-data str
    then state-data str state-skip str
    error error-from-position state-pos str error-from-got error-from-str "end of file"

(parse-if str (func test) (then value str) (error info))
parse-any str
    if  func value
        then value str
        error error-from-position state-pos str error-from-wanted error-from-str "match unknown criterion"
    error info

(parse-value str value (then value str) (error info))
parse-if str equal value test
    then value str
    error error-from-position state-pos str
        error-from-both
            error-from-wanted error-from-char value
            error-from-got
                if  state-has-data str
                    error-from-char state-data str
                    error-from-str "end of file"

(parse-and str (parse1 str (then value str) (error info)) (parse2 str (then value str) (error info)) (then value str) (error info))
parse1 str
    let v1 value
    parse2 str
        let v2 value
        then cons v1 v2 str
        error info
    error info

(parse-zero-or-more str (parse1 str (then value str) (error info)) (then value str) (error info))
parse-and str
    parse1 str
        then value str
        error info
    parse-zero-or-more str
        parse1 str
            then value str
            error info
        then value str
        error info
    then value str
    then 0 str

(parse-one-or-more str (parse1 str (then value str) (error info)) (then value str) (error info))
parse-and str
    parse1 str
        then value str
        error info
    parse-zero-or-more str
        parse1 str
            then value str
            error info
        then value str
        error info
    then value str
    error info

# bindings #

(binding-of-value)   0
(binding-of-lambda)  1
(binding-of-generic) 2

(binding-value value)       cons binding-of-value  value
(binding-lambda value args generics) cons binding-of-lambda cons value cons args generics
(binding-generic value)     cons binding-of-generic  value

(binding-is-value binding)   equal binding-of-value   car binding
(binding-is-lambda binding)  equal binding-of-lambda  car binding
(binding-is-generic binding) equal binding-of-generic car binding

(get-binding-value binding)
if  binding-is-value binding
    cdr binding
if  binding-is-generic binding
    cdr binding
    get-binding-value car cdr binding

(get-binding-args binding)     car  cdr cdr binding
(get-binding-generics binding) cdr cdr cdr binding

(name-table-append table binding) cons binding table
(name-table-lookup table name)
and table
if  str-eq name get-binding-value car table
    car table
    name-table-lookup cdr table name

(binding-table) cons 0 0

(binding-table-append-generic tab binding)
cons car tab
     name-table-append cdr tab binding
(binding-table-append tab binding)
cons name-table-append car tab binding
     cdr tab

(binding-table-lookup-generic tab binding)
name-table-lookup cdr tab binding

(binding-table-lookup tab binding)
or  name-table-lookup car tab binding
    binding-value binding
# ast #

(ast-of-name)     0
(ast-of-call)     1
(ast-of-function) 2
(ast-of-number)   3
(ast-of-extern)   4
(ast-of-lambda)   5
(ast-of-str)      6

(ast-name name)          cons ast-of-name     name
(ast-call args)          cons ast-of-call     args
(ast-function args then) cons ast-of-function cons args then
(ast-number num)         cons ast-of-number   num
(ast-extern args)        cons ast-of-extern   args
(ast-lambda args then)   cons ast-of-lambda   cons args then
(ast-str str)            cons ast-of-str      str

(ast-is-name tree)     equal ast-of-name     car tree
(ast-is-call tree)     equal ast-of-call     car tree
(ast-is-function tree) equal ast-of-function car tree
(ast-is-number tree)   equal ast-of-number   car tree
(ast-is-extern tree)   equal ast-of-extern   car tree
(ast-is-lambda tree)   equal ast-of-lambda   car tree
(ast-is-str tree)      equal ast-of-str      car tree

(binding-to-ast bind)
if  binding-is-value bind
    ast-name get-binding-value bind
if  binding-is-lambda bind
    ast-call cons
        ast-name get-binding-value bind
        map tree get-binding-args bind
            # binding-to-ast tree #
            ast-name get-binding-value tree
if  binding-is-generic bind
    ast-name get-binding-value bind
    ast-str "???"

# ebrew parser #

(within-range test low high)
and not above test high not above low test

(is-word-char-init test)
or  within-range test 'a 'z
or  within-range test 'A 'Z
or  equal test '-
    equal test '_

(is-digit test)
within-range test '0 '9

(is-word-char test)
or  is-word-char-init test
    is-digit test

(parse-word str (then value str) (error info))
parse-and str
    parse-if strip str is-word-char-init test
        then value str
        error error-from-position state-pos str "expected a start of word character"
    parse-zero-or-more str
        parse-if str is-word-char test
            then value str
            error error-from-position state-pos str "expected word character"
        then value str
        error info
    then value str
    error info

(parse-square str (then value str) (error info))
parse-value strip str '[
    parse-zero-or-more str
        parse-word str
            then value str
            error info
        let ret value
        parse-value strip str ']
            then ret str
            error info
        error info
    then 0 str

(parse-args-from str names (then value str) (error info))
parse-value strip str '(
    parse-word str
        let func value
        parse-square str
            let generics
                fold generics arg
                     0        value
                    cons binding-generic arg generics
            let names
                fold names name
                     names value
                    cons name names
            parse-zero-or-more str
                parse-args-from str names
                    then value str
                    error info
                let args value
                parse-value strip str ')
                    then
                        binding-lambda binding-value func args generics
                        str
                    error info
                error info
            error info
        error info
    parse-word str
        if  contains names str-eq el value
            then binding-generic value str
            then binding-value value str
        error info

(parse-args str (then value str) (error info))
parse-args-from str 0
    then value str
    error info

(parse-generic-args str tab generics (then str tab) (error info))
if  generics
    parse-args str
        let tab binding-table-append-generic tab binding-lambda car generics cons value 0 0
        parse-generic-args str tab cdr generics
            then str tab
            error info
        error info
    then str tab

(parse-expr-match str tab value (parse-call str tab bindings (parse-expr str tab (then value str tab) (error info)) (then value str tab) (error info)) (parse-expr str tab (then value str tab) (error info)) (then value str tab) (error info))
let binding binding-table-lookup tab value
if  not binding
    error error-from-position state-pos str "unknown name"
if  binding-is-generic binding
    then ast-name value str tab
if  binding-is-value binding
    then ast-name value str tab
if  binding-is-lambda binding
    let v1 value
    parse-generic-args str tab get-binding-generics binding
        parse-call str tab get-binding-args binding
            parse-expr str tab then value str tab error info
            then ast-call cons ast-name v1 value str tab
            error info
        error info
    error error-from-position state-pos str "binding can not be understood"

(parse-call str tab bindings (parse-expr str tab (then value str tab) (error info)) (then value str tab) (error info))
if  bindings
    let binding car bindings
    if  binding-is-generic binding
        let generic-binding-all binding-table-lookup-generic tab get-binding-value binding
        if  generic-binding-all
            let generic-value car get-binding-args generic-binding-all
            let tab binding-table-append tab generic-value
            parse-call str tab cons generic-value cdr bindings
                parse-expr str tab then value str tab error info
                then value str tab
                error info
            parse-expr str tab
                let v1 value
                parse-call str tab cdr bindings
                    parse-expr str tab then value str tab error info
                    then cons v1 value str tab
                    error info
                error info
    if  binding-is-value binding
        parse-expr str tab
            let v1 value
            parse-call str tab cdr bindings
                parse-expr str tab then value str tab error info
                then cons v1 value str tab
                error info
            error info
    if  binding-is-lambda binding
        let tab
            fold tab-with-arg lambda-arg
                 tab          get-binding-args binding
                binding-table-append tab-with-arg lambda-arg
        parse-expr str tab
            let v1  ast-lambda
                    map arg get-binding-args binding
                        ast-name if binding-is-generic arg
                            let gen binding-table-lookup-generic tab get-binding-value arg
                                get-binding-value car get-binding-args gen
                            get-binding-value arg
                    value
            parse-call str tab cdr bindings
                parse-expr str tab then value str tab error info
                then cons v1 value str tab
                error info
            error info
        error error-from-position state-pos str "binding could not be understood"
    then 0 str tab

(parse-str-expr str (then value str) (error info))
parse-value str '"
    parse-zero-or-more str
        parse-if str not equal '" test
            then value str
            error info
        let ret ast-str value
        parse-value str '"
            then ret str
            error info
        error info
    parse-value str ''
        parse-any str
            then ast-number value str
            error info
        error info

(parse-expr str tab (then0 value str tab) (error info))
let str strip str
let tab-init tab
parse-one-or-more str
    parse-if str is-digit test
        then value str
        error info
    then0 ast-number str-to-num value str tab
    parse-word str
        parse-expr-match str tab value
            parse-call str tab bindings parse-expr str tab then value str tab error info then value str tab error info
            parse-expr str tab then value str tab error info
            then0 value str tab-init
            error info
        parse-str-expr str
            then0 value str tab-init
            error info

(parse-toplevel-single str tab (then value str tab) (error info))
parse-args str
    let func-bind value
    if  binding-is-lambda func-bind
        let func-ast binding-to-ast func-bind
        let tab-with-func binding-table-append tab func-bind
        parse-value strip str '?
            then ast-extern func-ast str tab-with-func
            let tab-with-args
                fold tab-with-arg  func-arg
                     tab-with-func get-binding-args func-bind
                    binding-table-append tab-with-arg func-arg
            parse-expr str tab-with-args
                then ast-function func-ast value str tab-with-func
                error info
        error error-from-position state-pos str "expected toplevel function, not scalar"
    error info

(parse-toplevel str tab (then values str tab) (error info))
if  not state-has-data strip str
    then 0 str tab
    parse-toplevel-single str tab
        parse-toplevel str tab
            then cons value values str tab
            error info
        error info


(defs-append defs name value)
cons cons name value defs

(defs-lookup defs name)
and defs
if  str-eq name car car defs
    cdr car defs
    defs-lookup cdr defs name

(ir-form-type-error) 0
(ir-form-type-let) 1
(ir-form-type-block) 2
(ir-form-type-call) 3
(ir-form-type-function) 4
(ir-form-type-params) 5
(ir-form-type-let-closure) 6
(ir-form-type-extern) 7
(ir-form-type-return) 8
(ir-form-type-closure-get) 9
(ir-form-type-let-string) 10

(ir-form-type-to-str type)
if equal type ir-form-type-error "error"
if equal type ir-form-type-let "let"
if equal type ir-form-type-block "block"
if equal type ir-form-type-call "call"
if equal type ir-form-type-function "function"
if equal type ir-form-type-params "params"
if equal type ir-form-type-let-closure "let-closure"
if equal type ir-form-type-extern "extern"
if equal type ir-form-type-return "return"
if equal type ir-form-type-closure-get "closure-get"
if equal type ir-form-type-let-string "let-string"
    "unknown"

(ir-of-form type args) cons 0 cons type args
(ir-is-form ir) equal 0 car ir
(ir-form-type ir) car cdr ir
(ir-form-args ir) cdr cdr ir

(ir-of-ident ident) cons 1 ident
(ir-is-ident ir) equal 1 car ir
(ir-ident-text ir) cdr ir

(ir-of-number number) cons 2 number
(ir-is-number ir) equal 2 car ir
(ir-number-value ir) cdr ir

(ir-of-string string) cons 3 string
(ir-is-string ir) equal 3 car ir
(ir-string-value ir) cdr ir

(ir-of-form-block args)
ir-of-form ir-form-type-block
    fold e el
        0 args
        concat
            if  and ir-is-form el equal ir-form-type-block ir-form-type el
                ir-form-args el
                cons el 0
            e

(ir-print-spaces n)
and n
do  putchar 32
    ir-print-spaces sub 1 n

(ir-print-depth ir n)
if  ir-is-form ir
    let type ir-form-type-to-str ir-form-type ir
    let args ir-form-args ir
    do  put-str "("
    do  put-str type
    do  for arg args
        let n add 2 n
        do  put-line
        do  ir-print-spaces n
            ir-print-depth arg n
    do  put-str ")"
        0
if  ir-is-ident ir
    put-str ir-ident-text ir
if  ir-is-number ir
    put-num ir-number-value ir
if  ir-is-string ir
    do  putchar '"
    do  put-str ir-string-value ir
        putchar '"
put-str "<unk>"

(ir-print ir)
ir-print-depth ir 0

(scan-ast-captures tree defs)
if  ast-is-name tree
    cons cdr tree
        0
if  ast-is-call tree
    flatten
        let r map arg cdr tree
            scan-ast-captures arg defs
            r
if  ast-is-lambda tree
    let defs cdr
        fold duo      def
            cons 0 0  defs
            cons add 1 car duo
                 defs-append cdr duo car def cons 1 car duo
    let defs cdr
        fold duo         arg
             cons 0 defs car cdr tree
            cons add 1 car duo
                 defs-append cdr duo cdr arg cons 0 cdr arg
        scan-ast-captures cdr cdr tree defs
    0

(defs-filter-keep-used tree defs defs-init)
let used scan-ast-captures tree defs
    filter def defs-init
        has-str used car def

(path-to-ident path)
ir-of-ident reverse path

(mark-for-return path)
path

(compile-ir-pre tree (get-path) defs (compile-ir tree (get-path) defs))
if  ast-is-call tree
    reverse cdr fold state el
            cons 0 0 reverse cdr cdr tree
        let n car state
        cons add 1 n
            concat
                let path cons add '0 n get-path
                reverse compile-ir-pre
                    el
                    path
                    defs
                    compile-ir tree get-path defs
                cdr state
if  ast-is-lambda tree
    let path cons 'f get-path
    let defs
        defs-filter-keep-used cdr cdr tree defs defs
    let defs cdr
        fold duo      def
            cons 0 0  defs
            cons add 1 car duo
                 defs-append cdr duo car def cons 1 car duo
    let defs cdr
        fold duo         arg
             cons 0 defs car cdr tree
            cons add 1 car duo
                 defs-append cdr duo cdr arg cons 0 cdr arg
    concat
        compile-ir-pre
            cdr cdr tree
            mark-for-return path
            defs
            compile-ir tree get-path defs
        cons
            ir-of-form ir-form-type-function
                cons path-to-ident path
                cons ir-of-form ir-form-type-params
                    cons ir-of-ident "closure"
                    map arg car cdr tree
                        ir-of-ident cdr arg
                cons ir-of-form-block
                    cons compile-ir cdr cdr tree mark-for-return path defs
                    cons ir-of-form ir-form-type-return
                        cons path-to-ident mark-for-return path
                            0
                        0
                    0
            0
    0

(compile-ir tree (get-path) defs)
if  ast-is-name tree
    let found defs-lookup defs cdr tree
    ir-of-form ir-form-type-let
        cons path-to-ident get-path
        cons if and found equal 1 car found
            ir-of-form ir-form-type-closure-get
                cons ir-of-ident "closure"
                cons ir-of-number add 1 cdr found
                    0
            ir-of-ident cdr tree
            0
if  ast-is-call tree
    ir-of-form-block
        let found defs-lookup defs cdr car cdr tree
        let lambda-path cons 'c get-path
        let func-cons
            if found
                cons ir-of-form ir-form-type-closure-get
                        cons path-to-ident lambda-path
                        cons ir-of-number 0
                            0
                    path-to-ident lambda-path
                cons path-to-ident lambda-path
                    ir-of-ident cdr car cdr tree
        concat if found
            cons compile-ir car cdr tree lambda-path defs
                0
            0
        let func if found
            car func-cons
            ir-of-ident cdr car cdr tree
        cons ir-of-form-block
            reverse cdr fold state el
                        cons 0 0 reverse cdr cdr tree
                    let n car state
                    let path
                        cons add '0 n get-path
                    let arg compile-ir el path defs
                    cons add 1 n cons arg cdr state
        cons ir-of-form ir-form-type-let
            cons path-to-ident get-path
            cons ir-of-form ir-form-type-call
                cons func
                cdr fold state el
                    cons 0 cons cdr func-cons 0 cdr cdr tree
                    let n car state
                    cons add 1 n
                    cons path-to-ident
                            cons add '0 n get-path
                        cdr state
                0
            0
if  ast-is-function tree
    let path reverse cdr car cdr car cdr tree
    let defs
        fold xdefs arg
             0     cdr cdr car cdr tree
            defs-append xdefs cdr arg cons 0 cdr arg
    let pre
        compile-ir-pre
            cdr cdr tree
            mark-for-return path
            defs
            compile-ir tree get-path defs
    let base ir-of-form ir-form-type-function
        cons path-to-ident path
        cons ir-of-form ir-form-type-params
            cons ir-of-ident "closure"
            map arg cdr cdr car cdr tree
                ir-of-ident cdr arg
        cons ir-of-form-block
            cons compile-ir cdr cdr tree mark-for-return path defs
            cons ir-of-form ir-form-type-return
                cons path-to-ident mark-for-return path
                    0
                0
            0
        concat pre cons base 0
if  ast-is-number tree
    ir-of-form ir-form-type-let
        cons path-to-ident get-path
        cons ir-of-number cdr tree
            0
if  ast-is-extern tree
    cons ir-of-form ir-form-type-extern
        cons ir-of-ident cdr car cdr cdr tree
        cons ir-of-form ir-form-type-params
            map arg cdr cdr cdr tree
                ir-of-ident cdr arg
            0
        0
if  ast-is-lambda tree
    let path cons 'f get-path
    let defs
        defs-filter-keep-used cdr cdr tree defs defs
    let defs-init defs
    let defs cdr
        fold duo      def
            cons 0 0  defs
            cons add 1 car duo
                 defs-append cdr duo car def cons 1 car duo
    let defs cdr
        fold duo         arg
             cons 0 defs car cdr tree
            cons add 1 car duo
                 defs-append cdr duo cdr arg cons 0 cdr arg
    ir-of-form ir-form-type-let-closure
        cons path-to-ident get-path
        cons path-to-ident path
            map def reverse defs-init
                let found cdr def
                if equal 1 car found
                    ir-of-form ir-form-type-closure-get
                        cons ir-of-ident "closure"
                        cons ir-of-number add 1 cdr found
                            0
                    ir-of-ident cdr found
if  ast-is-str tree
    ir-of-form ir-form-type-let-string
        cons path-to-ident get-path
        cons ir-of-string cdr tree
            0
ir-of-ident "<TODO: else>"

(for-ir [name] str (in name))
parse-toplevel str-to-state str binding-table
    for node values
        for el compile-ir node 0 0
            in el
    put-error info

(endline)
cons 10 0

(put-ir-c ir)
if  ir-is-form ir
    let type ir-form-type ir
    let args ir-form-args ir
    if  equal type ir-form-type-let
        do  put-str "  size_t "
        do  put-ir-c car args
        do  put-str " = (size_t) ("
        do  put-ir-c car cdr args
        do  put-str ");"
        do  put-line
            0
    if  equal type ir-form-type-block
        do  put-str "{"
        do  put-line
        do  for arg args
            put-ir-c arg
        do  put-str "}"
        do  put-line
            0
    if  equal type ir-form-type-call
        do  put-str "((size_t (*)("
        do  fold n arg
                 0 cdr args
                do  and n put-str ", "
                do  put-str "size_t"
                    add 1 n
        do  put-str "))"
        do  put-ir-c car args
        do  put-str ")("
        do  fold n arg
                 0 cdr args
                do  and n put-str ", "
                do  put-str "(size_t) ("
                do  put-ir-c arg
                do  put-str ")"
                    add 1 n
        do  put-str ")"
            0
    if  equal type ir-form-type-function
        do  put-str "size_t "
        do  put-ir-c car args
        do  put-ir-c car cdr args
        do  put-ir-c car cdr cdr args
            endline
    if  equal type ir-form-type-params
        do  put-str "("
        do  fold n arg
                 0 reverse args
                do  and n put-str ", "
                do  put-str "size_t "
                do  put-ir-c arg
                    add 1 n
        do  put-str ")"
            0
    if  equal type ir-form-type-let-closure
        do  put-str "  size_t "
        do  put-ir-c car args
        do  put-str "["
        do  put-num length cdr args 
        do  put-str "] = {"
        do  put-line
        do  for arg cdr args
                do  put-str "    (size_t) ("
                do  put-ir-c arg
                do  put-str "),"
                do  put-line
                    0
        do  put-str "  };"
        do  put-line
            0
    if  equal type ir-form-type-extern
        0
    if  equal type ir-form-type-return
        do  put-str "  return "
        do  put-ir-c car args
        do  put-str ";"
        do  put-line
            0
    if  equal type ir-form-type-closure-get
        do  put-str "((size_t *)"
        do  put-ir-c car args
        do  put-str ")["
        do  put-ir-c car cdr args
        do  put-str "]"
            0
    if  equal type ir-form-type-let-string
        do  put-str "  static size_t "
        do  put-ir-c car args
        do  put-str " = 0;"
        do  put-line
        do  put-str "  ebz_stol(&"
        do  put-ir-c car args
        do  put-str ", "
        do  put-ir-c car cdr args
        do  put-str ");"
        do  put-line
            0
        0
if  ir-is-ident ir
    do  put-str "eb_"
    for c ir-ident-text ir
        if  equal c '-
            put-str "_"
            putchar c
if  ir-is-number ir
    put-num ir-number-value ir
if  ir-is-string ir
    do  put-str cons '" 0
    do  put-str ir-string-value ir
    do  put-str cons '" 0
        0
    0

(put-ir-c-decl ir)
if  and ir-is-form ir
    equal ir-form-type ir ir-form-type-function
    let args ir-form-args ir
    do  put-str "size_t "
    do  put-ir-c car args
    do  put-ir-c car cdr args
    do  put-str ";"
    do  put-line
        0
    0

(put-ir-cpp-let name)
concat "let_" name

(put-ir-cpp-ctx ctx)
fold n elem
     0 ctx
    do  and n put-str ", "
    do  put-str elem
        add 1 n

(put-ir-cpp-name-fix name)
concat "eb_" reverse
    fold s c
         0 reverse name
        if  equal c '-
            cons '_ s
            cons c s

(put-ir-cpp-block (put-ir-cpp ir) ctx ir)
let args ir-form-args ir
fold ctx ir
        ctx reverse args
    let type ir-form-type ir
    let args ir-form-args ir
    if  equal type ir-form-type-let-closure
        do  put-str "CALL("
        do  put-str "let_closure_"
        do  put-ir-cpp car args
        do  and ctx put-str ", "
        do  put-ir-cpp-ctx ctx
        do  and ctx put-str ", ("
        do  fold n arg
                 0 reverse cdr args
            do  and n put-str ", "
            do  put-ir-cpp arg
                add 1 n
        do  put-str ")) "
        do  put-line
        do  put-str "#define M_let_closure_"
        do  put-ir-cpp car args
        do  put-str " let_closure_"
        do  put-ir-cpp car args
        do  put-line
        do  put-str "#define let_closure_"
        do  put-ir-cpp car args
        do  put-str "("
        do  put-ir-cpp-ctx ctx
        do  and args put-str ", "
        do  put-ir-cpp car args
        do  put-str ") "
            cons put-ir-cpp-name-fix ir-ident-text car args ctx
    if  or  equal type ir-form-type-let
            equal type ir-form-type-let-string
        do  put-str "CALL CCONS "
        do  let ir car reverse args
            if  and ir-is-form ir
                    equal ir-form-type ir ir-form-type-call
                put-ir-cpp ir
                do  put-str "("
                do  put-ir-cpp ir
                do  put-str ")"
                    0
        do  put-str " ("
        do  put-str "let_"
        do  put-ir-cpp car args
        do  and ctx put-str ", "
        do  put-ir-cpp-ctx ctx
        do  put-str ") "
        do  put-line
        do  put-str "#define M_let_"
        do  put-ir-cpp car args
        do  put-str " let_"
        do  put-ir-cpp car args
        do  put-line
        do  put-str "#define let_"
        do  put-ir-cpp car args
        do  put-str "("
        do  put-ir-cpp-ctx ctx
        do  and ctx put-str ", "
        do  put-ir-cpp car args
        do  put-str ") "
            cons put-ir-cpp-name-fix ir-ident-text car args ctx
    if  equal type ir-form-type-return
        do  put-str "("
        do  put-ir-cpp car args
        do  put-str ")"
            ctx
        do  put-str "/* TODO */ "
        do  put-ir-cpp ir
            ctx

(put-ir-cpp-nat n)
if n
    do  put-str "(1, "
    do  put-ir-cpp-nat sub 1 n
    do  put-str ")"
        0
    put-str "(0)"

(put-ir-cpp ir)
if  ir-is-form ir
    let type ir-form-type ir
    let args ir-form-args ir
    if  equal type ir-form-type-block
        put-ir-cpp-block put-ir-cpp ir 0 ir
    if  equal type ir-form-type-call
        do  put-str "CALL("
        do  put-ir-cpp car args
        do  fold n arg
                 0 cdr args
                do  put-str ", "
                do  put-ir-cpp arg
                    add 1 n
        do  put-str ")"
            0
    if  equal type ir-form-type-function
        let ctx
            map arg reverse ir-form-args car cdr args
                put-ir-cpp-name-fix ir-ident-text arg
        do  put-line
        do  put-str "#define M_"
        do  put-ir-cpp car args
        do  put-str " "
        do  put-ir-cpp car args
        do  put-line
        do  put-str "#define "
        do  put-ir-cpp car args
        do  put-ir-cpp car cdr args
        do  put-ir-cpp-block put-ir-cpp ir ctx car cdr cdr args
            put-line
    if  equal type ir-form-type-params
        do  put-str "("
        do  fold n arg
                 0 reverse args
                do  and n put-str ", "
                do  put-ir-cpp arg
                    add 1 n
        do  put-str ") "
            0
    if  equal type ir-form-type-closure-get
        do  put-str "OP_TUPLE_"
        do  put-num ir-number-value car cdr args
        do  put-str " "
        do  put-ir-cpp car args
            0
    if  equal type ir-form-type-extern
        0
    do  put-str "/* TODO: ELSE */"
        0
if  ir-is-ident ir
    do  put-str "eb_"
    for c ir-ident-text ir
        if  equal c '-
            put-str "_"
            putchar c
if  ir-is-number ir
    put-ir-cpp-nat ir-number-value ir
if  ir-is-string ir
    do  for c ir-string-value ir
        do  put-str "(2, "
        do  put-ir-cpp-nat c
        do  put-str ", "
            0
    do  put-ir-cpp-nat 0
    do  for c ir-string-value ir
        do  putchar ')
            0
        0
0

(main-lang lang str)
if  str-eq lang "ir"
    for-ir ir str
        do  put-line
        do  ir-print ir
            put-line
if  str-eq lang "c"
    parse-toplevel str-to-state str binding-table
        do  put-str "#include "
        do  putchar 34
        do  put-str "include/ebrew.h"
        do  putchar 34
        do  put-line
        for node values
            let ir compile-ir node 0 0
            do  put-ir-c-decl car reverse ir
            for el ir
                put-ir-c el
        put-error info
if  str-eq lang "cpp"
    parse-toplevel str-to-state str binding-table
        do  put-str "#include "
        do  putchar 34
        do  put-str "include/cpp.h"
        do  putchar 34
        do  put-line
        do  for node values
            let ir compile-ir node 0 0
            for el ir
                put-ir-cpp el
        do  put-line
        do  put-str "RUN"
        do  put-line
            0
        put-error info
do  put-str "unknown target: "
do  put-str lang
    put-line

(comp-final file lang)
main-lang lang read-file file

(comp args file lang)
if  and args str-eq "--target" car args
    comp cdr cdr args file car cdr args
    comp-final car args lang

(main args)
comp args 0 "c"
