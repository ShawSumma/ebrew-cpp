
///////////////////////
// Stackless Runners //
///////////////////////

export let Cont = fn(Value): Void;
var hasTodo = false;
var todoArg: Value;
let todoContBase(v: Value): Void {}
var todoCont: Cont = todoContBase;

export let request(cont: Cont, arg: Value): Void {
  todoCont = cont;
  todoArg = arg;
  hasTodo = true;
}

export let runTodo(): Void {
  var n = 0;
  while (hasTodo) {
    n += 1;
    hasTodo = false;
    todoCont(todoArg);
  }
}

////////////
// Scopes //
////////////
export class Def(
  public key: String,
  public value: Value,
) {}

export interface Scope {
  public lookup(name: String): Value;
  public toString(): String;
}

let notFound = number(0);

export class GlobalScope(public vars: MapBuilder<String, Value>) extends Scope {
  public lookup(name: String): Value {
    return vars.getOr(name, notFound);
  }

  public add(key: String, value: Value): Void {
    vars[key] = value;
  }

  public toString(): String {
    return "{...}";
  }
}

export class LocalScope(
  public next: Scope,
  public keys: Listed<String>,
  public env: MapBuilder<String, Value>,
) extends Scope {

  public lookup(name: String): Value {
    if (env.has(name)) {
      return env.getOr(name, notFound);
    } else {
      return next.lookup(name);
    }
  }

  public toString(): String {
    var my = keys.join(" ", fn(s: String):String{s});
    return "{${my}} ${next}"
  }
}

/////////////
// Runners //
/////////////

export interface Runner {
  public run(env: LocalScope, cont: Cont): Void;
}

export class ErrRunner extends Runner {}  

export class LookupRunner(public name: String) extends Runner {
  public run(env: LocalScope, cont: Cont): Void {
    request(cont, env.lookup(name));
  }
}

export const Define = fn(Listed<Value>, Cont): Void | Bubble;

export class DefineRunner(public callback: Define) extends Runner {
  public run(env: LocalScope, cont: Cont): Void {
    var ls = new ListBuilder<Value>();
    for (var i = 0; i < env.keys.length; i++) {
      ls.add(env.env[env.keys[i]]) orelse do {};
    }
    callback(ls, cont) orelse do {};
  }
}

export class LambdaRunner(
  public params: List<String>,
  public body: Runner,
) extends Runner {
  public run(env: LocalScope, cont: Cont): Void {
    request(cont, lambda(env, params, body));
  }
}

export class CallRunner(
  public funcName: String,
  public args: List<Runner>,
) extends Runner {
  public run(env: LocalScope, cont: Cont): Void {
    let func = env.lookup(funcName).asLambda();
    var scopeArgs = new MapBuilder<String, Value>();
    if (func.params.length == 0) {
      func.body.run(new LocalScope(func.scope, [], scopeArgs), cont);
    } else {
      let self = this;
      var numScopeArgs = 0;

      let more(v: Value): Void {
        scopeArgs[func.params.getOr(numScopeArgs++, "")] = v;
        if (numScopeArgs == self.args.length) {
          func.body.run(new LocalScope(func.scope, func.params, scopeArgs), cont);
        } else {
          self.args[scopeArgs.length].run(env, more) orelse do {};
        }
      }

      self.args[0].run(env, more) orelse do {};
    }
  }
}

export class ValueRunner(
  public value: Value,
) extends Runner {
  public run(env: LocalScope, cont: Cont): Void {
    request(cont, value);
  }
}

////////////
// Values //
////////////

export let number(n: Int): Value {
  return new ValueInt(n);
}

export let cons(l: Value, r: Value): Value {
  return new Cons(l, r);
}

export let lambda(scope: LocalScope, args: List<String>, body: Runner): Value {
  return new Lambda(scope, args, body);
}

export let string(id: String): Value {
  var ret: Value = number(0);
  var parts = id.split("");
  for (var i = parts.length - 1; i >= 0; i--) {
    (ret = cons(number(parts[i][String.begin]), ret)) orelse do {};
  }
  return ret;
}

export let unstring(var value: Value): String {
  var ret = new ListBuilder<Int>();
  while (!value.isZero()) {
    let cons = value.asCons();
    ret.add(cons.first.asInt()) orelse do {};
    value = cons.second;
  }
  return ret.join("", fn(i: Int): String {
    String.fromCodePoint(i) orelse ""
  });
}

export interface Value {
  public asInt(): Int;
  public asCons(): Cons;
  public asLambda(): Lambda;

  public isZero(): Boolean;
  public toString(): String;
}

export class Cons(
  public first: Value,
  public second: Value,
) extends Value {
  public isZero(): Boolean {
    return false;
  }

  public asCons(): Cons {
    return this;
  }

  public toString(): String {
    return "cons ${first} ${second}";
  }
}

export class Lambda(
  public scope: LocalScope,
  public params: List<String>,
  public body: Runner,
) extends Value {
  public isTrue(): Boolean {
    return false;
  }

  public asLambda(): Lambda {
    return this;
  }

  public toString(): String {
    return "lambda ...";
  }
}

export class ValueInt(public value: Int) extends Value {
  public isZero(): Boolean {
    return value == 0;
  }
  
  public asInt(): Int {
    return value;
  }

  public toString(): String {
    return value.toString();
  }
}
